/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fr.arezzo.designer;

import fr.arezzo.designer.Scene.Scene;
import fr.arezzo.designer.palette.PaletteSupport;
import fr.arezzo.designer.palette.ShapeNode;
import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import javax.swing.JScrollPane;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.graph.GraphScene;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Exceptions;

import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.Lookups;
import org.openide.windows.TopComponent;

/**
 * ArezzoDesignerTopComponent represents the window container of the Arezzo
 Designer
 *
 * @author akram.sahbi@esprit.tn
 */
@ConvertAsProperties(
        dtd = "-//fr.arezzo.designer//ArezzoWindowTopComponent//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ArezzoWindowTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "fr.arezzo.designer.ArezzoWindowTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ArezzoWindowAction",
        preferredID = "ArezzoWindowTopComponent"
)
@Messages({
    "CTL_ArezzoWindowAction=ArezzoWindow",
    "CTL_ArezzoWindowTopComponent=ArezzoWindow Window",
    "HINT_ArezzoWindowTopComponent=This is a ArezzoWindow window"
})
public final class ArezzoWindowTopComponent extends TopComponent {

    public ArezzoWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_ArezzoWindowTopComponent());
        setToolTipText(Bundle.HINT_ArezzoWindowTopComponent());
        setName("Arezzo");

        setLayout(new BorderLayout());
        JScrollPane scrollPane = new JScrollPane();
        add(scrollPane, BorderLayout.CENTER);
        //Set the layout: 
        setLayout(new BorderLayout());

        //Add the JScrollPane to the JPanel: 
        add(scrollPane, BorderLayout.CENTER);
        //Create the GraphSceneImpl:
        //GraphSceneImpl scene = new GraphSceneImpl(); 
        GraphScene<ShapeNode, String> scene = new Scene();

        //Add it to the JScrollPane: 
        scrollPane.setViewportView(scene.createView());
        //Add the SatellitView to the scene: 
        add(scene.createSatelliteView(), BorderLayout.WEST);
        //associateLookup( Lookups.singleton(PaletteSupport.createPalette() )); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        associateLookup(Lookups.singleton(PaletteSupport.createPalette()));
        
    }

    @Override
    public void componentClosed() {
        //end of the mouse and keyboard simulation
        Robot robot;
        try {
            robot = new Robot();

            //simulate the ctrl button release
            robot.keyRelease(KeyEvent.VK_CONTROL);
                //simulate the mouse button release
            //robot.mouseRelease(InputEvent.BUTTON1_MASK );

        } catch (AWTException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
